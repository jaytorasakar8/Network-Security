#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include <errno.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netinet/if_ether.h>     /* includes net/ethernet.h */
#include <pcap.h>                /* if this gives you an error try pcap/pcap.h */
#include <netinet/tcp.h>
#include <netinet/ip.h>

/**************Compile using (for sniff) gcc <filenamename.c> -lpcap -o sniff *********************************************************/
void interface_read();




int main(int argc, char const *argv[])
{
	/************** All declarations*/
	int i=0, j=0, k=0;  //initialized for general usage, could be used in loops etc.
	char *device = NULL;   //for capturing the name of the device
	char errorbuffer[PCAP_ERRBUF_SIZE];  //predefined value of pcap_effbuf_size=256, stored in one of the libraries 	
	char *interface=NULL;
	char *file= NULL;
	char *string = NULL;
	char *expression = NULL;
	pcap_t *descriptor = NULL; // a handler
	char *parameters [1000];
	// end of all declarations



	/************* Code Starts here. */
	
	printf("\nThis is a code which is used for capturing the packets in promiscious mode"); 
	
	for (i = 0; i < argc; i++)
	{
		parameters[i] = argv[i]; //making a copy of the passed arguments.
	}

	while()
	{
		
	}

	device=pcap_lookupdev(errorbuffer); //ask the pcap to find a valid device(NIC) to sniff on

	if(device == NULL)
		{
			printf("There is no device available");
			exit(1);
		}
	printf("The device name is: %s\n",device );	// Printing the device name

	descriptor = pcap_open_live(device, 2048, 1, 512, errorbuffer);   //open the device in promisicious mode

}


void interface_read()
{
	
}
